# -*- coding: utf-8 -*-
"""All algorithm for shortest paths.
"""

try:
    import networkx as nx
except:
    raise

import time
__author__ = """guot <tong.guo@nttdata.com>"""
__all__ = ['dijkstra',
           'astar',
           'floyd']


def dijkstra(list_nodes_id, M_topo, M=99999, source=None, target=None, weight='weight'):
    starttime = time.time()

    G = nx.DiGraph()

    for i in range(len(M_topo)):
        for j in range(len(M_topo[0])):
            if i != j and M_topo[i][j] != M:
                G.add_edge(list_nodes_id[i], list_nodes_id[j], weight=M_topo[i][j])

    path = nx.dijkstra_path(G, source, target, weight='weight')
    dist = nx.dijkstra_path_length(G, source, target, weight='weight')

    endtime = time.time()
    return path, dist, endtime - starttime


def astar(list_nodes_id, M_topo, M=99999, source=None, target=None, weight='weight'):
    starttime = time.time()
    G = nx.DiGraph()

    for i in range(len(M_topo)):
        for j in range(len(M_topo[0])):
            if i != j and M_topo[i][j] != M:
                G.add_edge(list_nodes_id[i], list_nodes_id[j], weight=M_topo[i][j])

    path = nx.astar_path(G, source, target, weight='weight')
    dist = nx.astar_path_length(G, source, target, weight='weight')
    endtime = time.time()

    return path, dist, endtime - starttime


def floyd(list_nodes_id, M_topo, M=99999, source=None, target=None, weight='weight'):
    starttime = time.time()
    G = nx.DiGraph()

    for i in range(len(M_topo)):
        for j in range(len(M_topo[0])):
            if i != j and M_topo[i][j] != M:
                G.add_edge(list_nodes_id[i], list_nodes_id[j], weight=M_topo[i][j])
    path, length = nx.floyd_warshall_predecessor_and_distance(G, weight='weight')
    endtime = time.time()

    return path[source][target], length[source][target], endtime - starttime


if __name__ == '__main__':
    list_nodes_id = ["ServerTokens", "ServerRoot", "PidFile", "Listen", "Timeout", "KeepAlive", "StartServers",
                     "MinSpareThreads", "MaxSpareThreads", "ServerLimit", "MaxRequestWorkers", "MaxConnectionsPerChild",
                     "ThreadLimit", "ThreadsPerChild", "User", "Group", "ServerAdmin", "ServerName", "ErrorLog",
                     "LogLevel", "LogFormat"]
    ### ==================== Given constants matrix of topology.
    M = 99999  # This represents a large distance. It means that there is no link.
    ### M_topo is the 2-dimensional adjacent matrix used to represent a topology.
    M_topo = [
        [M, 1, 1, M, 1, M, 1, 1, 1, M, M, M, M, M, M, M, M, M, M, M, M],
        [M, M, 1, M, M, 1, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M],
        [M, M, M, 1, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M],
        [M, M, M, M, 1, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M],
        [M, M, M, M, M, M, M, M, M, 1, 1, 1, M, M, M, M, M, M, M, M, M],
        [M, M, M, M, M, M, 1, M, M, M, M, M, M, M, M, M, M, M, M, M, M],
        [M, M, M, M, M, M, M, 1, M, M, M, M, M, M, M, M, M, M, M, M, M],
        [M, M, M, M, M, M, M, M, 1, M, M, M, M, M, M, M, M, M, M, M, M],
        [M, M, M, M, M, M, M, M, M, 1, M, M, 1, M, M, M, M, M, M, M, M],
        [M, M, M, M, M, M, M, M, M, M, M, 1, M, M, M, M, M, M, M, M, M],
        [M, M, M, M, M, M, M, M, M, M, M, 1, M, 0.2, M, M, M, M, M, M, M],
        [M, M, M, M, M, M, M, M, M, M, M, M, M, 1, 0.3, M, M, M, M, M, M],
        [M, M, M, M, M, M, M, M, M, M, M, M, M, M, 1, M, M, M, M, M, M],
        [M, M, M, M, M, M, M, M, M, M, M, M, M, M, 1, M, M, 1, 1, M, M],
        [M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, 1, 1, M, M, M, M],
        [M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, 1, M, 1, 1, M],
        [M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, 1],
        [M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, 1, M, M],
        [M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, 1, M],
        [M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, 1],
        [M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M]
    ]

    print("*" * 50 + "Dijkstra path algorithms(path & length & usetime)" + "*" * 50)
    path, length, usetime= dijkstra(list_nodes_id, M_topo, M=99999, source='ServerTokens', target='LogFormat', weight='weight')
    print(path)
    print(length)
    print(usetime)

    print("*" * 50 + "Astar path algorithms(path & length & usetime)" + "*" * 50)
    path, length, usetime= astar(list_nodes_id, M_topo, M=99999, source='ServerTokens', target='LogFormat', weight='weight')
    print(path)
    print(length)
    print(usetime)

    print("*" * 50 + "floyd path algorithms(path & length & usetime)" + "*" * 50)
    path, length, usetime= floyd(list_nodes_id, M_topo, M=99999, source='ServerTokens', target='LogFormat', weight='weight')
    print(path)
    print(length)
    print(usetime)
