# -*- coding: utf-8 -*-
"""All algorithm for shortest paths.
"""

try:
    import networkx as nx
except:
    raise

import time

__author__ = """guot <tong.guo@nttdata.com>"""
__all__ = ['dijkstra',
           'astar',
           'floyd']


def convertToDiGraph(nodelist, M_topo, M=99999):
    g = nx.DiGraph()
    for i in range(len(M_topo)):
        for j in range(len(M_topo[0])):
            if i != j and M_topo[i][j] != M:
                g.add_edge(nodelist[i], nodelist[j], weight=M_topo[i][j])
    return g


def dijkstra(nodelist, M_topo, M=99999, source=None, target=None, weight='weight'):
    starttime = time.time()
    g = convertToDiGraph(nodelist, M_topo, M=M)
    path = nx.dijkstra_path(g, source, target, weight=weight)
    dist = nx.dijkstra_path_length(g, source, target, weight=weight)
    endtime = time.time()
    return path, dist, endtime - starttime


def astar(nodelist, M_topo, M=99999, source=None, target=None, weight='weight'):
    starttime = time.time()
    g = convertToDiGraph(nodelist, M_topo, M=M)
    path = nx.astar_path(g, source, target, weight=weight)
    dist = nx.astar_path_length(g, source, target, weight=weight)
    endtime = time.time()
    return path, dist, endtime - starttime


def floyd(nodelist, M_topo, M=99999, source=None, target=None, weight='weight'):
    starttime = time.time()
    g = convertToDiGraph(nodelist, M_topo, M=M)
    path, length = nx.floyd_warshall_predecessor_and_distance(g, weight=weight)
    path_list = []
    s = source
    t = target
    while path[s][t] != source:
        path_list.append(t)
        t = path[s][t]
    path_list.append(t)
    path_list.append(s)
    path_list.reverse()
    endtime = time.time()
    return path_list, length[source][target], endtime - starttime

